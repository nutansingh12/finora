name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finora_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: packages/backend/package-lock.json
    
    - name: Install dependencies
      working-directory: packages/backend
      run: npm ci
    
    - name: Run linting
      working-directory: packages/backend
      run: npm run lint
    
    - name: Run type checking
      working-directory: packages/backend
      run: npm run type-check
    
    - name: Run tests
      working-directory: packages/backend
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: finora_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: packages/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Web App Tests
  web-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: packages/web/package-lock.json
    
    - name: Install dependencies
      working-directory: packages/web
      run: npm ci
    
    - name: Run linting
      working-directory: packages/web
      run: npm run lint
    
    - name: Run type checking
      working-directory: packages/web
      run: npm run type-check
    
    - name: Run tests
      working-directory: packages/web
      run: npm run test:coverage
    
    - name: Build application
      working-directory: packages/web
      run: npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: packages/web/coverage/lcov.info
        flags: web
        name: web-coverage

  # Mobile App Tests
  mobile-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: packages/mobile/package-lock.json
    
    - name: Install dependencies
      working-directory: packages/mobile
      run: npm ci
    
    - name: Run linting
      working-directory: packages/mobile
      run: npm run lint
    
    - name: Run type checking
      working-directory: packages/mobile
      run: npm run type-check
    
    - name: Run tests
      working-directory: packages/mobile
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: packages/mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, web-test, mobile-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, web-test, mobile-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Build and push Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/web
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
    
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Mobile App Build (iOS)
  build-ios:
    runs-on: macos-latest
    needs: [mobile-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: packages/mobile/package-lock.json
    
    - name: Install dependencies
      working-directory: packages/mobile
      run: npm ci
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: packages/mobile/ios
    
    - name: Install CocoaPods
      working-directory: packages/mobile/ios
      run: pod install
    
    - name: Build iOS app
      working-directory: packages/mobile
      run: |
        npx react-native build-ios --mode=Release
    
    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: packages/mobile/ios/build/

  # Mobile App Build (Android)
  build-android:
    runs-on: ubuntu-latest
    needs: [mobile-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: packages/mobile/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install dependencies
      working-directory: packages/mobile
      run: npm ci
    
    - name: Build Android app
      working-directory: packages/mobile
      run: |
        cd android
        ./gradlew assembleRelease
    
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: packages/mobile/android/app/build/outputs/
